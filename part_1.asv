img = imread('images/QR_2.jpeg');
img = imgaussfilt(img,3);
%Threshold = adaptthresh(img, 1);
%bw_img = imbinarize(img, Threshold);
%kernel = [-1, -1, -1; -1, 17, -1; -1, -1, -1]/ 9;
%bw_img = conv2(double(bw_img), kernel, 'same');
%imshow(bw_img);

%for row = 1 : 178 
%    Tr_Line = BW(row,:)
%    length_modules = ratio_finder(Tr_Line)
%end

binary_matrix_test = decode_qr(img, 37);
isequal(binary_matrix_test, correct_matrix);
figure;
subplot(1,2,1), imshow(img);
subplot(1,2,2), imshow(binary_matrix_test);

function [ratio_array] = ratio_finder(in_array)
    ratio_array = ones(1, length(in_array));
    k=1;
    for i = 1 : length(in_array)-1
        if(in_array(i) == in_array(i+1))
            ratio_array(k) = ratio_array(k) + 1;
        else
            k = k + 1;
        end
    end

    ratio_array = out(1:k);
end

function [final_array] = decode_qr(input_image, qr_size)
    row_size = size(input_image, 1);
    modulepixel_size = floor(row_size/qr_size);

    Threshold = adaptthresh(input_image, 1);
    bw_img = imbinarize(input_image, Threshold);
    bw_img = imresize(bw_img, [666 666]);
    binary_array = zeros(qr_size).;
    indexRow = 1;
    indexCol = 1;
    for row = 1:modulepixel_size:666
        indexCol = 1;
        for col = 1:modulepixel_size:666
            portion = bw_img(row:row+(modulepixel_size-1),col:col+(modulepixel_size-1));
            mode_value = mode(portion, 'all');
            binary_array(indexRow, indexCol) = mode_value;
            indexCol = indexCol + 1;
        end
        indexRow = indexRow + 1;
    end
    %downscaled_qr = imresize(input_image, [qr_size qr_size])
    %binary_array = round(blackwhite_qr)
    final_array = binary_array;
end